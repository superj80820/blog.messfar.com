<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>System-Design on York Lin&#39;s blog</title>
        <link>http://localhost:1313/tags/system-design/</link>
        <description>Recent content in System-Design on York Lin&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-tw</language>
        <lastBuildDate>Wed, 27 Mar 2024 00:00:00 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/system-design/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>System Design 系列</title>
        <link>http://localhost:1313/post/system-design/</link>
        <pubDate>Wed, 27 Mar 2024 00:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/post/system-design/</guid>
        <description>&lt;img src="http://localhost:1313/post/system-design/exchange-arch.png" alt="Featured image of post System Design 系列" /&gt;&lt;h2 id=&#34;clean-architecture&#34;&gt;Clean Architecture
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/c3we5K6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://i.imgur.com/c3we5K6.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;軟體世界雖然沒有silver bullet，但我們還是期待有高擴展性、測試性、維護性的系統，我將系統分為repository、usecase、delivery三層，並依照domain interface進行彼此的相依，以滿足大多情境的需求&lt;/p&gt;
&lt;h3 id=&#34;教學&#34;&gt;教學
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.notion.so/Backend-Clean-Architecture-efbeffa8389345aeb0adc1a974975657?pvs=21&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;你的 Backend 可以更有彈性一點 - Clean Architecture 概念篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.notion.so/Golang-Clean-Architecture-d3354aeb1ea84e66bd3f9254f2930617?pvs=21&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;奔放的 Golang，卻隱藏著有紀律的架構！ - Clean Architecture 實作篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.notion.so/Backend-Clean-Architecture-ad17b69f653b4f31a6dc2ffb120fc5f2?pvs=21&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;讓你的 Backend 萬物皆虛，萬事皆可測 - Clean Architecture 測試篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;撮合系統&#34;&gt;撮合系統
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/superj80820/system-design/master/doc/exchange-arch.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://raw.githubusercontent.com/superj80820/system-design/master/doc/exchange-arch.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;將後端&lt;a class=&#34;link&#34; href=&#34;https://github.com/superj80820/system-design/tree/master/exchange&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;exchange domain&lt;/a&gt;與開源前端&lt;a class=&#34;link&#34; href=&#34;https://github.com/gitbitex/gitbitex-web&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gitbitex-web&lt;/a&gt;串接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;預覽網頁(❗僅用最低效能運行預覽，不是 production 運作規格): &lt;a class=&#34;link&#34; href=&#34;https://preview.exchange.messfar.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://preview.exchange.messfar.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;可達到 100,000PRS。撮合引擎以記憶體計算&lt;/li&gt;
&lt;li&gt;可回放事件。以 event sourcing 的方式實現，撮合引擎為讀取 event 的有限狀態機，可 warm backup 多台 server 聽取 event，來達到 high availability&lt;/li&gt;
&lt;li&gt;可分散式。不同的domain可部署至不同機器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;壓測&#34;&gt;壓測
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/V7KFvvC.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://i.imgur.com/V7KFvvC.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;單機啟動 server、mysql、kafka、redis、mongodb，並進行買賣單搓合，並以k6壓測:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exchange 機器: EC2 c5.18xlarge&lt;/li&gt;
&lt;li&gt;k6 機器: EC2 m5.8xlarge&lt;/li&gt;
&lt;li&gt;RPS (max): 102,988.52&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果將 mysql 或 kafka 等服務獨立出來，理論上可用更便宜的機器&lt;/p&gt;
&lt;h3 id=&#34;教學-1&#34;&gt;教學
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.messfar.com/posts/system-design-1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何設計一個撮合系統&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.messfar.com/posts/system-design-2-sequence&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sequence 定序模組&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.messfar.com/posts/system-design-3-asset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Asset 資產模組&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.messfar.com/posts/system-design-4-order&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Order 訂單模組&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.messfar.com/posts/system-design-5-matching&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Matching 撮合模組&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.messfar.com/posts/system-design-6-clearing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Clearing 清算模組&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.messfar.com/posts/system-design-7-integration&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;整合撮合系統&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
